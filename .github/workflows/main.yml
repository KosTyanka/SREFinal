name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_FRONTEND_REPOSITORY: concert-ticketing-frontend
  ECR_BACKEND_REPOSITORY: concert-ticketing-backend
  ECS_CLUSTER: concert-ticketing-cluster
  ECS_FRONTEND_SERVICE: frontend-service
  ECS_BACKEND_SERVICE: backend-service

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Frontend Build & Test
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Frontend Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Frontend Build
        working-directory: ./frontend
        run: npm run build

      # Backend Build & Test
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Backend Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Backend Tests
        working-directory: ./backend
        run: pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        working-directory: ./frontend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest

      - name: Build and push Backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        working-directory: ./backend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest

      - name: Update ECS services
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment 